#!/usr/bin/env python
# -*- coding: utf-8 -*-
# archivo : stats_anual_actual.py
#
##############################################################################
#
#
# Sancabase - Administrador general para centros de Formación Profesional
# Copyright (c) 2007 Javier Castrillo // riverplatense at gmail dot com
#Este programa es software libre; usted puede redistruirlo y/o modificarlo bajo
#los términos de la Licencia Pública General GNU, tal y como está publicada
#por la Free Software Foundation; ya sea la versión 2 de la Licencia, o (a su
#elección) cualquier versión posterior.
#
#Este programa se distribuye con la intención de ser útil, pero SIN NINGUNA
#GARANTÍA; incluso sin la garantía implícita de USABILIDAD O UTILIDAD PARA UN
#FIN PARTICULAR. Vea la Licencia Pública General GNU para más detalles.
#
#Usted debería haber recibido una copia de la Licencia Pública General GNU
#junto a este programa; si no es así, escriba a la Free Software Foundation,
#Inc. 675 Mass Ave, Cambridge, MA 02139, EEUU.
#
#
##############################################################################

# generated by wxGlade 0.6.3 on Thu Oct 29 07:58:02 2009

import wx
import MySQLdb
import datetime
import sys

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # Conectarse a la db
        self.db = MySQLdb.connect('localhost', 'javier', 'javier', 'escuela', charset='UTF8')
        f = open('selec_anio', 'r')
        self.anio = f.readline()
        f.close()
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel = wx.Panel(self, -1)
        self.labelStats = wx.StaticText(self.panel, -1, u"Estadísticas del año %s" % self.anio)
        self.static_line_1 = wx.StaticLine(self.panel, -1)
        self.listStats = wx.ListCtrl(self.panel, -1, style=wx.LC_REPORT|wx.LC_SORT_ASCENDING|wx.SUNKEN_BORDER)
        self.btnCancelar = wx.Button(self.panel, wx.ID_CANCEL, "")
        self.btnAceptar = wx.Button(self.panel, wx.ID_PRINT, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnCancelar, self.btnCancelar)
        self.Bind(wx.EVT_BUTTON, self.OnAceptar, self.btnAceptar)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(u"Estadísticas")
        self.SetSize((611, 426))
        self.labelStats.SetFont(wx.Font(18, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        columnas = [u'Item a considerar', u'Mujeres', u'Varones', u'Totales']
        for col, text in enumerate(columnas):
            self.listStats.InsertColumn(col, text)
        self.listStats.SetColumnWidth(0, 400)
        self.listStats.SetColumnWidth(1, wx.LIST_AUTOSIZE_USEHEADER)
        self.listStats.SetColumnWidth(2, wx.LIST_AUTOSIZE_USEHEADER)
        self.listStats.SetColumnWidth(3, wx.LIST_AUTOSIZE_USEHEADER)
        c = self.db.cursor()
        
        # Item generales
        index = self.listStats.InsertStringItem(sys.maxint, u'Matrícula')

        # Cantidad de alumnos anotados este año
        c.execute('''SELECT id_curso, num_curso FROM cursos WHERE ciclo = ?;''', (self.anio))
        cursos_totales = c.fetchall()
        if len (cursos_totales) == 0:
            return
        chicas_tot = chicos_tot  = 0
        listado_inicial = []
        for curso in cursos_totales:
            c.execute('''SELECT id_alumno FROM curso_%s ORDER BY id_alumno;''' % curso[1])
            alumnos_en_curso = c.fetchall()
            for alumno in alumnos_en_curso:
                listado_inicial.append(alumno)
            #print curso[1], len(listado_inicial)
        #listado_inicial = set(listado_inicial)
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, id_alumno FROM alumnos WHERE id_alumno = ?''' % alumno[0])
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                chicas_tot += 1
            else:
                chicos_tot += 1
        alumnos_este_ciclo = len(listado_inicial)        
        lista = [unicode.encode(u'Estudiantes totales en cursos de este año', 'utf8'),
         chicas_tot, chicos_tot, alumnos_este_ciclo]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Los que realmente terminaron
        chicas = chicos  = 0
        listado_inicial = []
        for curso in cursos_totales:
            c.execute('''SELECT id_alumno FROM curso_%s WHERE abandono = 0 ORDER BY id_alumno;''' % curso[1])
            alumnos_en_curso = c.fetchall()
            for alumno in alumnos_en_curso:
                listado_inicial.append(alumno)
            #print curso[1], len(listado_inicial)
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, id_alumno FROM alumnos WHERE id_alumno = ?''' % alumno[0])
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                chicas += 1
            else:
                chicos += 1
        alumnos_este_ciclo = len(listado_inicial)        
        lista = [unicode.encode(u'Estudiantes cursantes totales en cursos de este año', 'utf8'),
         chicas, chicos, alumnos_este_ciclo]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
        # Porcentaje de deserción
        porc_chicas = 100 -(chicas * 100 / chicas_tot)
        porc_chicos = 100 - (chicos * 100 / chicos_tot)
        porc_total = 100 - ((chicas + chicos) * 100 / (chicas_tot + chicos_tot))
        lista = [unicode.encode(u'Porcentaje de deserción', 'utf-8'), u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
        # Item generales
        index = self.listStats.InsertStringItem(sys.maxint, u'')
        index = self.listStats.InsertStringItem(sys.maxint, u'Generales')
        
        # Alumnos argentinos
        chicas_ar = 0
        chicos_ar = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, nacionalidad FROM alumnos WHERE id_alumno =?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[1] == 'AR':
                if cadalum[0] == 'F':
                    chicas_ar += 1
                else:
                    chicos_ar += 1
        lista = [u'Argentinos', chicas_ar, chicos_ar, chicas_ar + chicos_ar]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Porcentaje de argentinos
        porc_chicas = (chicas_ar * 100 / chicas)
        porc_chicos = (chicos_ar * 100 / chicos)
        porc_total = ((chicas_ar + chicos_ar) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de argentinos', 'utf-8'), u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
        # Alumnos extranjeros
        chicas_ext = chicas - chicas_ar
        chicos_ext = chicos - chicos_ar
        ext = chicas_ext + chicos_ext
        lista = [u'Extranjeros', chicas_ext, chicos_ext, ext]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
        # Porcentaje de extranjeros
        porc_chicas = 100 - porc_chicas
        porc_chicos = 100 - porc_chicos
        porc_total = 100 - porc_total
        lista = [unicode.encode(u'Porcentaje de extranjeros', 'utf-8'), u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
        # Jefe de familia
        chicas_jefes = 0
        chicos_jefes = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, jefe FROM alumnos WHERE id_alumno =?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[1] == 1:
                if cadalum[0] == 'F':
                    chicas_jefes += 1
                else:
                    chicos_jefes += 1
        lista = [u'Jefes de Familia', chicas_jefes, chicos_jefes, chicas_jefes + chicos_jefes]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Porcentaje de jefes de familia
        porc_chicas = (chicas_jefes * 100 / chicas)
        porc_chicos = (chicos_jefes * 100 / chicos)
        porc_total = ((chicas_jefes + chicos_jefes) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de jefes de familia', 'utf-8'), u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
  
        # Item edades
        index = self.listStats.InsertStringItem(sys.maxint, u'')
        index = self.listStats.InsertStringItem(sys.maxint, u'Franjas etáreas')  
        
        # Adolescentes
        chicas_adolesc = 0
        chicos_adolesc = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, fecha_nac FROM alumnos WHERE id_alumno =?''' % alumno)
            cadalum = c.fetchone()
            anio = cadalum[1]
            anio = anio.year
            if int(self.anio) - anio < 19:
                if cadalum[0] == 'F':
                    chicas_adolesc += 1
                else:
                    chicos_adolesc += 1
        lista = [unicode.encode(u'Adolescentes (menores de 18 años)', 'utf-8'), chicas_adolesc,
         chicos_adolesc, chicas_adolesc + chicos_adolesc]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Porcentaje de adolescentes
        porc_chicas = (chicas_adolesc * 100 / chicas)
        porc_chicos = (chicos_adolesc * 100 / chicos)
        porc_total = ((chicas_adolesc + chicos_adolesc) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de adolescentes', 'utf-8'), u'%s %%' % porc_chicas,
         u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Jóvenes
        chicas_jov = 0
        chicos_jov = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, fecha_nac FROM alumnos WHERE id_alumno =%s''' % alumno)
            cadalum = c.fetchone()
            anio = cadalum[1]
            anio = anio.year
            if 18 < int(self.anio) - anio < 31:
                if cadalum[0] == 'F':
                    chicas_jov += 1
                else:
                    chicos_jov += 1
        lista = [unicode.encode(u'Jóvenes entre 19 y 30 años', 'utf-8'),
         chicas_jov, chicos_jov, chicas_jov + chicos_jov]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Porcentaje de jóvenes
        porc_chicas = (chicas_jov * 100 / chicas)
        porc_chicos = (chicos_jov * 100 / chicos)
        porc_total = ((chicas_jov + chicos_jov) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de jóvenes', 'utf-8'), u'%s %%' % porc_chicas,
         u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))    

        # Adultos
        chicas_adu = 0
        chicos_adu = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, fecha_nac FROM alumnos WHERE id_alumno =?''' % alumno)
            cadalum = c.fetchone()
            anio = cadalum[1]
            anio = anio.year
            if int(self.anio) - anio > 30:
                if cadalum[0] == 'F':
                    chicas_adu += 1
                else:
                    chicos_adu += 1
        lista = [unicode.encode(u'Adultos', 'utf-8'),
         chicas_adu, chicos_adu, chicas_adu + chicos_adu]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Porcentaje de Adultos
        porc_chicas = (chicas_adu * 100 / chicas)
        porc_chicos = (chicos_adu * 100 / chicos)
        porc_total = ((chicas_adu + chicos_adu) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de adultos', 'utf-8'), u'%s %%' % porc_chicas,
         u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))    

        # Item educación
        index = self.listStats.InsertStringItem(sys.maxint, u'')
        index = self.listStats.InsertStringItem(sys.maxint, u'Educación')
        
        # Escolarizados
        chicas_escolariz = 0
        chicos_escolariz = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = %s''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT cursando FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicas_escolariz += 1
            else:
                c.execute('''SELECT cursando FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicos_escolariz += 1
        lista = [unicode.encode(u'Estudiantes que concurren a la escuela formal', 'utf-8'),
         chicas_escolariz, chicos_escolariz, chicas_escolariz + chicos_escolariz]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Porcentaje de escolarizados
        porc_chicas = (chicas_escolariz * 100 / chicas)
        porc_chicos = (chicos_escolariz * 100 / chicos)
        porc_total = ((chicas_escolariz + chicos_escolariz) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes que concurren a la escuela formal', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Abandonaron estudios formales
        chicas_aband = 0
        chicos_aband = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT abandono FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicas_aband += 1
            else:
                c.execute('''SELECT abandono FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicos_aband += 1
        lista = [unicode.encode(u'Estudiantes que abandonaron la escuela formal', 'utf-8'),
         chicas_aband, chicos_aband, chicas_aband + chicos_aband]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Porcentaje de abandonos
        porc_chicas = (chicas_aband * 100 / chicas)
        porc_chicos = (chicos_aband * 100 / chicos)
        porc_total = ((chicas_aband + chicos_aband) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes que abandonaron la escuela formal', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Han hecho otros cursos de FP
        chicas_fp = 0
        chicos_fp = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT otroscursosfp FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicas_fp += 1
            else:
                c.execute('''SELECT otroscursosfp FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicos_fp += 1
        lista = [unicode.encode(u'Estudiantes que hacen o hicieron otro curso de FP', 'utf-8'),
         chicas_fp, chicos_fp, chicas_fp + chicos_fp]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Porcentaje de otros cursos de FP
        porc_chicas = (chicas_fp * 100 / chicas)
        porc_chicos = (chicos_fp * 100 / chicos)
        porc_total = ((chicas_fp + chicos_fp) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes que ha hecho otro curso de FP', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Item escolaridad
        index = self.listStats.InsertStringItem(sys.maxint, u'')
        index = self.listStats.InsertStringItem(sys.maxint, u'Escolaridad máxima alcanzada')
            
        # Primario completo e incompleto
        chicas_prim_c = 0
        chicos_prim_c = 0
        chicas_prim_i = 0
        chicos_prim_i = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, estudios, hasta_est FROM alumnos WHERE id_alumno =?''' % alumno)
            cadalum = c.fetchone()
            if (cadalum[1] == u'Primarios') and (cadalum[2] == 0):
                if cadalum[0] == 'F':
                    chicas_prim_c += 1
                else:
                    chicos_prim_c += 1
            if (cadalum[1] == u'Primarios') and (cadalum[2] != 0):
                if cadalum[0] == 'F':
                    chicas_prim_i += 1
                else:
                    chicos_prim_i += 1
        lista = [unicode.encode(u'Primario incompleto', 'utf-8'),
         chicas_prim_i, chicos_prim_i, chicas_prim_i + chicos_prim_i]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        porc_chicas = (chicas_prim_i * 100 / chicas)
        porc_chicos = (chicos_prim_i * 100 / chicos)
        porc_total = ((chicas_prim_i + chicos_prim_i) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje primario incompleto', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        lista = [unicode.encode(u'Primario completo', 'utf-8'),
         chicas_prim_c, chicos_prim_c, chicas_prim_c + chicos_prim_c]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        porc_chicas = (chicas_prim_c * 100 / chicas)
        porc_chicos = (chicos_prim_c * 100 / chicos)
        porc_total = ((chicas_prim_c + chicos_prim_c) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje primario completo', 'utf-8'), 
        u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
         # Secundario completo e incompleto
        chicas_sec_c = 0
        chicos_sec_c = 0
        chicas_sec_i = 0
        chicos_sec_i = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, estudios, hasta_est FROM alumnos WHERE id_alumno =?''' % alumno)
            cadalum = c.fetchone()
            if (cadalum[1] == u'Secundarios') and (cadalum[2] == 0):
                if cadalum[0] == 'F':
                    chicas_sec_c += 1
                else:
                    chicos_sec_c += 1
            if (cadalum[1] == u'Secundarios') and (cadalum[2] != 0):
                if cadalum[0] == 'F':
                    chicas_sec_i += 1
                else:
                    chicos_sec_i += 1
        lista = [unicode.encode(u'Secundario incompleto', 'utf-8'),
         chicas_sec_i, chicos_sec_i, chicas_sec_i + chicos_sec_i]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        porc_chicas = (chicas_sec_i * 100 / chicas)
        porc_chicos = (chicos_sec_i * 100 / chicos)
        porc_total = ((chicas_sec_i + chicos_sec_i) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje secundario incompleto', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        lista = [unicode.encode(u'Secundario completo', 'utf-8'),
         chicas_sec_c, chicos_sec_c, chicas_sec_c + chicos_sec_c]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        porc_chicas = (chicas_sec_c * 100 / chicas)
        porc_chicos = (chicos_sec_c * 100 / chicos)
        porc_total = ((chicas_sec_c + chicos_sec_c) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje secundario completo', 'utf-8'), 
        u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))           

         # Terciario completo e incompleto
        chicas_terc_c = 0
        chicos_terc_c = 0
        chicas_terc_i = 0
        chicos_terc_i = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, estudios, hasta_est FROM alumnos WHERE id_alumno =?''' % alumno)
            cadalum = c.fetchone()
            if (cadalum[1] == u'Terciarios') and (cadalum[2] == 0):
                if cadalum[0] == 'F':
                    chicas_terc_c += 1
                else:
                    chicos_terc_c += 1
            if (cadalum[1] == u'Terciarios') and (cadalum[2] != 0):
                if cadalum[0] == 'F':
                    chicas_terc_i += 1
                else:
                    chicos_terc_i += 1
        lista = [unicode.encode(u'Terciario incompleto', 'utf-8'),
         chicas_terc_i, chicos_terc_i, chicas_terc_i + chicos_terc_i]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        porc_chicas = (chicas_terc_i * 100 / chicas)
        porc_chicos = (chicos_terc_i * 100 / chicos)
        porc_total = ((chicas_terc_i + chicos_terc_i) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje terciario incompleto', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        lista = [unicode.encode(u'Terciario completo', 'utf-8'),
         chicas_terc_c, chicos_terc_c, chicas_terc_c + chicos_terc_c]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        porc_chicas = (chicas_terc_c * 100 / chicas)
        porc_chicos = (chicos_terc_c * 100 / chicos)
        porc_total = ((chicas_terc_c + chicos_terc_c) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje terciario completo', 'utf-8'), 
        u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))               
            
        # Universitario completo e incompleto
        chicas_univ_c = 0
        chicos_univ_c = 0
        chicas_univ_i = 0
        chicos_univ_i = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo, estudios, hasta_est FROM alumnos WHERE id_alumno =?''' % alumno)
            cadalum = c.fetchone()
            if (cadalum[1] == u'Universitarios') and (cadalum[2] == 0):
                if cadalum[0] == 'F':
                    chicas_univ_c += 1
                else:
                    chicos_univ_c += 1
            if (cadalum[1] == u'Universitarios') and (cadalum[2] != 0):
                if cadalum[0] == 'F':
                    chicas_univ_i += 1
                else:
                    chicos_univ_i += 1
        lista = [unicode.encode(u'Universitario incompleto', 'utf-8'),
         chicas_univ_i, chicos_univ_i, chicas_univ_i + chicos_univ_i]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        porc_chicas = (chicas_univ_i * 100 / chicas)
        porc_chicos = (chicos_univ_i * 100 / chicos)
        porc_total = ((chicas_univ_i + chicos_univ_i) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje universitario incompleto', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        lista = [unicode.encode(u'Universitario completo', 'utf-8'),
         chicas_univ_c, chicos_univ_c, chicas_univ_c + chicos_univ_c]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        porc_chicas = (chicas_univ_c * 100 / chicas)
        porc_chicos = (chicos_univ_c * 100 / chicos)
        porc_total = ((chicas_univ_c + chicos_univ_c) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje universitario completo', 'utf-8'), 
        u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text)) 
            
        # Item planes
        index = self.listStats.InsertStringItem(sys.maxint, u'')
        index = self.listStats.InsertStringItem(sys.maxint, u'Planes y asistencias')    
            
        # Reciben un plan social
        chicas_ps = 0
        chicos_ps = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT plansocial FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicas_ps += 1
            else:
                c.execute('''SELECT plansocial FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicos_ps += 1
        lista = [unicode.encode(u'Estudiantes que reciben plan social', 'utf-8'),
         chicas_ps, chicos_ps, chicas_ps + chicos_ps]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje que recibe plan social
        porc_chicas = (chicas_ps * 100 / chicas)
        porc_chicos = (chicos_ps * 100 / chicos)
        porc_total = ((chicas_ps + chicos_ps) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes que recibe plan social', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Reciben en la familia un plan social
        chicas_psf = 0
        chicos_psf = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT planfamiliar FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicas_psf += 1
            else:
                c.execute('''SELECT planfamiliar FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 1:
                    chicos_psf += 1
        lista = [unicode.encode(u'Estudiantes cuya familia recibe plan social', 'utf-8'),
         chicas_psf, chicos_psf, chicas_psf + chicos_psf]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje cuya familia recibe plan social
        porc_chicas = (chicas_psf * 100 / chicas)
        porc_chicos = (chicos_psf * 100 / chicos)
        porc_total = ((chicas_psf + chicos_psf) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes cuya familia recibe plan social', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))            

        # Item trabajo
        index = self.listStats.InsertStringItem(sys.maxint, u'')
        index = self.listStats.InsertStringItem(sys.maxint, u'Trabajo')

        # Desocupados
        chicas_ds = 0
        chicos_ds = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 'Desocupado/a':
                    chicas_ds += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 'Desocupado/a':
                    chicos_ds += 1
        lista = [unicode.encode(u'Estudiantes desocupados', 'utf-8'),
         chicas_ds, chicos_ds, chicas_ds + chicos_ds]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje desocupados
        porc_chicas = (chicas_ds * 100 / chicas)
        porc_chicos = (chicos_ds * 100 / chicos)
        porc_total = ((chicas_ds + chicos_ds) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes desocupados', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Empleados en relación de dependencia
        chicas_erd = 0
        chicos_erd = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 'Empleado/a  (Rel. dependencia)':
                    chicas_erd += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == 'Empleado/a  (Rel. dependencia)':
                    chicos_erd += 1
        lista = [unicode.encode(u'Estudiantes empleados en relación de dependencia', 'utf-8'),
         chicas_erd, chicos_erd, chicas_erd + chicos_erd]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje empleados en relación de dependencia
        porc_chicas = (chicas_erd * 100 / chicas)
        porc_chicos = (chicos_erd * 100 / chicos)
        porc_total = ((chicas_erd + chicos_erd) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes empleados en relación de dependencia', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Empleados contrato a término
        chicas_ec = 0
        chicos_ec = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Empleado/a (Contrato a término)':
                    chicas_ec += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Empleado/a (Contrato a término)':
                    chicos_ec += 1
        lista = [unicode.encode(u'Estudiantes empleados con contrato a término', 'utf-8'),
         chicas_ec, chicos_ec, chicas_ec + chicos_ec]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje empleados contratados a término
        porc_chicas = (chicas_ec * 100 / chicas)
        porc_chicos = (chicos_ec * 100 / chicos)
        porc_total = ((chicas_ec + chicos_ec) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes empleados con contrato a término', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Empleados informales
        chicas_inf = 0
        chicos_inf = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Empleado/a  (Informal)':
                    chicas_inf += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Empleado/a  (Informal)':
                    chicos_inf += 1
        lista = [unicode.encode(u'Estudiantes con empleo informal', 'utf-8'),
         chicas_inf, chicos_inf, chicas_inf + chicos_inf]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje empleados informales
        porc_chicas = (chicas_inf * 100 / chicas)
        porc_chicos = (chicos_inf * 100 / chicos)
        porc_total = ((chicas_inf + chicos_inf) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes con empleo informal', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Changarines
        chicas_cha = 0
        chicos_cha = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Changarín':
                    chicas_cha += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Changarín':
                    chicos_cha += 1
        lista = [unicode.encode(u'Estudiantes changarines', 'utf-8'),
         chicas_cha, chicos_cha, chicas_cha + chicos_cha]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje changarines
        porc_chicas = (chicas_cha * 100 / chicas)
        porc_chicos = (chicos_cha * 100 / chicos)
        porc_total = ((chicas_cha + chicos_cha) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes changarines', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Cuentapropista
        chicas_cp = 0
        chicos_cp = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Cuentapropista':
                    chicas_cp += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Cuentapropista':
                    chicos_cp += 1
        lista = [unicode.encode(u'Estudiantes cuentapropistas', 'utf-8'),
         chicas_cp, chicos_cp, chicas_cp + chicos_cp]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje cuentapropistas
        porc_chicas = (chicas_cp * 100 / chicas)
        porc_chicos = (chicos_cp * 100 / chicos)
        porc_total = ((chicas_cp + chicos_cp) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes cuentapropistas', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
        # Empresarios/as
        chicas_emp = 0
        chicos_emp = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Empresario/a':
                    chicas_emp += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Empresario/a':
                    chicos_emp += 1
        lista = [unicode.encode(u'Estudiantes empresarios', 'utf-8'),
         chicas_emp, chicos_emp, chicas_emp + chicos_emp]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje empresarios
        porc_chicas = (chicas_emp * 100 / chicas)
        porc_chicos = (chicos_emp * 100 / chicos)
        porc_total = ((chicas_emp + chicos_emp) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes empresarios', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
        # Comerciantes
        chicas_com = 0
        chicos_com = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Comerciante':
                    chicas_com += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Comerciante':
                    chicos_com += 1
        lista = [unicode.encode(u'Estudiantes que se dedican al comercio', 'utf-8'),
         chicas_com, chicos_com, chicas_com + chicos_com]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje comerciantes
        porc_chicas = (chicas_com * 100 / chicas)
        porc_chicos = (chicos_com * 100 / chicos)
        porc_total = ((chicas_com + chicos_com) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes que se dedican al comercio', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
        
        # Empleados/as casas de familia
        chicas_ecf = 0
        chicos_ecf = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Empleado/a casa de familia':
                    chicas_ecf += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Empleado/a casa de familia':
                    chicos_ecf += 1
        lista = [unicode.encode(u'Estudiantes que son trabajan en casas de familia', 'utf-8'),
         chicas_com, chicos_com, chicas_com + chicos_com]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje de empleados/as en casas de familia
        porc_chicas = (chicas_ecf * 100 / chicas)
        porc_chicos = (chicos_ecf * 100 / chicos)
        porc_total = ((chicas_ecf + chicos_ecf) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes que trabajan en casas de familia', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))
            
        # Jubilados
        chicas_jub = 0
        chicos_jub = 0
        for alumno in listado_inicial:
            c.execute('''SELECT sexo FROM alumnos WHERE id_alumno = ?''' % alumno)
            cadalum = c.fetchone()
            if cadalum[0] == 'F':
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Jubilado/a':
                    chicas_jub += 1
            else:
                c.execute('''SELECT empleo FROM legajo WHERE id_alumno = ?''' % alumno)
                cursadores = c.fetchone()
                if cursadores == None:
                    pass
                elif cursadores[0] == u'Jubilado/a':
                    chicos_jub += 1
        lista = [unicode.encode(u'Estudiantes que son jubilados', 'utf-8'),
         chicas_jub, chicos_jub, chicas_jub + chicos_jub]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        # Porcentaje de jubilados
        porc_chicas = (chicas_jub * 100 / chicas)
        porc_chicos = (chicos_jub * 100 / chicos)
        porc_total = ((chicas_jub + chicos_jub) * 100 / (chicas + chicos))
        lista = [unicode.encode(u'Porcentaje de estudiantes que son jubilados', 'utf-8'),
         u'%s %%' % porc_chicas, u'%s %%' % porc_chicos, u'%s %%' % porc_total]
        index = self.listStats.InsertStringItem(sys.maxint, str(lista[0]))
        for col, text in enumerate(lista[1:]):
            self.listStats.SetStringItem(index, col+1, str(text))

        
        c.close()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizerppal = wx.BoxSizer(wx.VERTICAL)
        sizerVert = wx.BoxSizer(wx.VERTICAL)
        sizerBtn = wx.BoxSizer(wx.HORIZONTAL)
        sizerVert.Add(self.labelStats, 0, 0, 0)
        sizerVert.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizerVert.Add(self.listStats, 1, wx.ALL|wx.EXPAND, 5)
        sizerBtn.Add(self.btnCancelar, 0, wx.ALL|wx.ALIGN_BOTTOM, 4)
        sizerBtn.Add(self.btnAceptar, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_BOTTOM, 5)
        sizerVert.Add(sizerBtn, 0, wx.ALL|wx.ALIGN_RIGHT, 5)
        self.panel.SetSizer(sizerVert)
        sizerppal.Add(self.panel, 1, wx.EXPAND, 0)
        self.SetSizer(sizerppal)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnCancelar(self, event): # wxGlade: MyFrame.<event_handler>
        self.Close()

    def OnAceptar(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnAceptar' not implemented!"
        event.Skip()

# end of class MyFrame


class Stats(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frameStats = MyFrame(None, -1, "")
        self.SetTopWindow(frameStats)
        frameStats.Show()
        return 1

# end of class Stats

if __name__ == "__main__":
    app = Stats(0)
    app.MainLoop()
