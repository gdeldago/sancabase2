#!/usr/bin/env python
# -*- coding: utf-8 -*-
# archivo : llenaracta.py
#
##############################################################################
#
#
# Sancabase - Administrador general para centros de Formación Profesional
# Copyright (c) 2007 Javier Castrillo // riverplatense at gmail dot com
#Este programa es software libre; usted puede redistruirlo y/o modificarlo bajo
#los términos de la Licencia Pública General GNU, tal y como está publicada
#por la Free Software Foundation; ya sea la versión 2 de la Licencia, o (a su
#elección) cualquier versión posterior.
#
#Este programa se distribuye con la intención de ser útil, pero SIN NINGUNA
#GARANTÍA; incluso sin la garantía implícita de USABILIDAD O UTILIDAD PARA UN
#FIN PARTICULAR. Vea la Licencia Pública General GNU para más detalles.
#
#Usted debería haber recibido una copia de la Licencia Pública General GNU
#junto a este programa; si no es así, escriba a la Free Software Foundation,
#Inc. 675 Mass Ave, Cambridge, MA 02139, EEUU.
#
#
##############################################################################


# generated by wxGlade 0.6.3 on Fri Aug 21 16:42:09 2009

import wx
import wx.grid
import sqlite3 as sql3

# begin wxGlade: extracode
# end wxGlade



class ActaExamen(wx.Frame):
    def __init__(self, *args, **kwds):
        # Conectarse a la db
        self.db = sql3.connect("sancabase2.db")
        c = self.db.cursor()
        # begin wxGlade: ActaExamen.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel = wx.Panel(self, -1)
        self.labelTituloVentana = wx.StaticText(self.panel, -1, u"Confección de acta de examen")
        self.static_line_title = wx.StaticLine(self.panel, -1)
        self.labelCurso = wx.StaticText(self.panel, -1, "Curso a calificar:")
        c.execute('''SELECT num_curso FROM cursos ORDER BY num_curso ASC''')
        cursos = c.fetchall()
        c.close()
        ListCursos = []
        for curso in cursos:
            ListCursos.append(curso[0])
        self.comboCurso = wx.ComboBox(self.panel, -1, choices = ListCursos, style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.labelFecha = wx.StaticText(self.panel, -1, "Fecha del examen: ")
        self.dateExamen = wx.DatePickerCtrl(self.panel, -1)
        self.gridCurso = wx.grid.Grid(self.panel, -1, size=(1, 1))
        self.buttonAceptar = wx.Button(self.panel, wx.ID_OK, "")
        self.buttonCancelar = wx.Button(self.panel, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.OnSeleccionCurso, self.comboCurso)
        self.Bind(wx.EVT_BUTTON, self.OnAceptar, self.buttonAceptar)
        self.Bind(wx.EVT_BUTTON, self.OnCancelar, self.buttonCancelar)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ActaExamen.__set_properties
        self.SetTitle(u"Confección de acta de examen")
        self.SetSize((750, 566))
        self.labelTituloVentana.SetFont(wx.Font(18, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        self.comboCurso.SetFocus()
        self.gridCurso.CreateGrid(0, 6)
        self.gridCurso.SetRowLabelSize(0)
        self.gridCurso.SetColLabelValue(0, "Nombre y Apellido")
        self.gridCurso.SetColSize(0, 205)
        self.gridCurso.SetColLabelValue(1, "Doc")
        self.gridCurso.SetColSize(1, 100)
        self.gridCurso.SetColLabelValue(2, "Taller")
        self.gridCurso.SetColSize(2, 100)
        self.gridCurso.SetColLabelValue(3, u"Tecnología")
        self.gridCurso.SetColSize(3, 100)
        self.gridCurso.SetColLabelValue(4, u"Cálculo")
        self.gridCurso.SetColSize(4, 100)
        self.gridCurso.SetColLabelValue(5, "Dibujo")
        self.gridCurso.SetColSize(5, 100)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ActaExamen.__do_layout
        sizerGrande = wx.BoxSizer(wx.VERTICAL)
        sizerVert = wx.BoxSizer(wx.VERTICAL)
        sizerBotones = wx.BoxSizer(wx.HORIZONTAL)
        sizerCurso = wx.BoxSizer(wx.HORIZONTAL)
        sizerVert.Add(self.labelTituloVentana, 0, wx.ALL, 2)
        sizerVert.Add(self.static_line_title, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 3)
        sizerCurso.Add(self.labelCurso, 0, wx.ALL, 2)
        sizerCurso.Add(self.comboCurso, 0, wx.ALL, 4)
        sizerCurso.Add(self.labelFecha, 0, wx.LEFT|wx.ALIGN_RIGHT, 25)
        sizerCurso.Add(self.dateExamen, 0, wx.ALL|wx.ALIGN_RIGHT, 0)
        sizerVert.Add(sizerCurso, 0, wx.ALL|wx.EXPAND|wx.SHAPED, 5)
        sizerVert.Add(self.gridCurso, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 8)
        sizerBotones.Add(self.buttonAceptar, 0, wx.ALL, 3)
        sizerBotones.Add(self.buttonCancelar, 0, wx.ALL, 3)
        sizerVert.Add(sizerBotones, 0, wx.ALL|wx.ALIGN_RIGHT, 1)
        self.panel.SetSizer(sizerVert)
        sizerGrande.Add(self.panel, 1, wx.EXPAND, 0)
        self.SetSizer(sizerGrande)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnSeleccionCurso(self, event): # wxGlade: ActaExamen.<event_handler>
        self.gridCurso.ClearGrid()
        self.filas = self.gridCurso.GetNumberRows()
        #self.gridCurso.DeleteRows(0, self.filas, False)
        self.curso = self.comboCurso.GetValue()
        c = self.db.cursor()
        c.execute('''SELECT fecha_final FROM cursos WHERE num_curso = ?''',(self.curso,))
        r = c.fetchone()
        diaex = r[0]
        dia = int(diaex[8:10])
        mes = int(diaex[5:7])
        anio = int(diaex[0:4])
        diaexamen = wx.DateTimeFromDMY(dia,mes-1,anio)
        self.dateExamen.SetValue(diaexamen)
        c.execute('''SELECT id_alumno FROM {curso} WHERE abandono = 0 order by id_alumno'''.format(curso="curso_" + self.curso))
        q = c.fetchall()
        ListAlum = [(u'%s' % tuple(a)) for a in q]
        try:
            c.execute('''DELETE FROM temporal''')
            self.db.commit()
        except: 
            c.execute('''CREATE TABLE temporal (`id_alumno` VARCHAR(11) NOT NULL, `apellidos` VARCHAR(30) NOT NULL , `nombres` VARCHAR(30) NOT NULL, `sexo` CHAR(1) NOT NULL, `tipo_doc` VARCHAR(3) NOT NULL,`num_doc` VARCHAR(10) NOT NULL, PRIMARY KEY (`id_alumno`))''')
        for id in ListAlum:       
            c.execute('''SELECT apellidos, nombres, sexo, tipo_doc, num_doc FROM alumnos WHERE id_alumno = ?''', (id,))
            q = c.fetchone()
            c.execute('''INSERT INTO temporal (id_alumno, apellidos, nombres, sexo, tipo_doc, num_doc)values (?,?,?,?,?,?)''', (id, q[0], q[1], q[2], q[3], q[4],))
            self.db.commit()
        c.execute('''SELECT * FROM temporal ORDER BY sexo DESC, apellidos, nombres''')
        q = c.fetchall()
        listAlumnosEnCurso = []
        # Lleno los nombres
        for elemento in q:
            cadena = elemento[1] + u' ' + elemento[2]
            listAlumnosEnCurso.append(cadena)
        c.close()
        for i, alumno in enumerate(listAlumnosEnCurso):
            self.gridCurso.InsertRows(i, 1, False)
            self.gridCurso.SetCellValue(i, 0, alumno)
        # Lleno los documentos
        listAlumnosEnCurso = []
        for elemento in q:
            if str(elemento[4]) == 'DNI':
                if len(elemento[5]) == 7:
                    cadena = elemento[3] + elemento[5] 
                else:
                    cadena = elemento[5]
            else:
                cadena = u'En trámite'
            listAlumnosEnCurso.append(cadena)
        c.close()
        for i, alumno in enumerate(listAlumnosEnCurso):
            self.gridCurso.SetCellValue(i, 1, alumno)    

    def OnAceptar(self, event): # wxGlade: ActaExamen.<event_handler>
        # Armo una lista de tuplas
        # para luego llevar esos datos a la hoja del acta
        self.filas = self.gridCurso.GetNumberRows()
        lista = []
        for i in range(self.filas):
            tupla =[]
            for j in range (6):
                a = self.gridCurso.GetCellValue(i, j)
                tupla.append(a)
            t = tuple(tupla)
            lista.append(t)
        from reportlab.pdfgen import canvas
        from reportlab.lib.units import cm
        from reportlab.lib.colors import white
        from reportlab.lib.pagesizes import legal, landscape
        from actaexamen import canvas, actaexamenes
        orden = 1
        if orden < 19:
            acta = canvas.Canvas("./planillas/actaexamen_%s.pdf" % self.curso, pagesize=landscape(legal))
            actaexamenes(acta)
            acta.drawString(28.5*cm, 15.9*cm, u'%s' % self.curso) # Número de curso
            c = self.db.cursor()
            c.execute('''SELECT * FROM cursos WHERE num_curso = ?''', (self.curso,))
            q = c.fetchone()
            c.execute('''SELECT nombre, localidad FROM miescuela''')
            r = c.fetchone()
            c.close()
            # Revoleo para armar la casilla de especialidad
            esp = q[3]
            self.especialidad = q[3].split()
            if len(self.especialidad) == 1:
                acta.drawString(21.8*cm, 18.8*cm, u'%s' % (self.especialidad[0]))
            elif len(self.especialidad) == 2:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
            elif len(self.especialidad) == 3:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s' % (self.especialidad[2]))
            elif len(self.especialidad) == 4:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s' % (self.especialidad[2], self.especialidad[3]))
            elif len(self.especialidad) == 5:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s' % (self.especialidad[2], self.especialidad[3],
                 self.especialidad[4]))
            elif len(self.especialidad) == 6:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
            elif len(self.especialidad) == 7:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
                acta.drawString(19.2*cm, 17.6*cm, u'%s' % (self.especialidad[6])) 
            elif len(self.especialidad) == 8:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
                acta.drawString(19.2*cm, 17.6*cm, u'%s %s' % (self.especialidad[6], self.especialidad[7]))
            elif len(self.especialidad) == 9:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
                acta.drawString(19.2*cm, 17.6*cm, u'%s %s %s' % (self.especialidad[6], self.especialidad[7],
                 self.especialidad[8]))
            elif len(self.especialidad) == 10:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
                acta.drawString(19.2*cm, 17.6*cm, u'%s %s %s %s' % (self.especialidad[6],
                 self.especialidad[7], self.especialidad[8],
                 self.especialidad[9]))
            else:
                pass # u'me superó :P'
            acta.drawString(6.3*cm, 16.8*cm, u'%s' % r[0]) # Nombre del establecimiento
            acta.drawString(18.3*cm, 16.8*cm, u'%s' % r[1]) # Localidad del establecimiento
            self.fecha = self.dateExamen.GetValue()
            self.dia = self.fecha.GetDay()
            self.mes = self.fecha.GetMonth() + 1
            self.anio = self.fecha.GetYear()
            acta.drawString(22.0*cm, 16.8*cm, u'%02d' % int(self.dia)) # Día del examen
            import calendar
            self.mes = calendar.month_name[self.mes]
            acta.drawString(2.3*cm, 16.2*cm, u'%s' % self.mes) # Mes del examen
            acta.drawString(7.4*cm, 16.2*cm, u'%s' % self.anio) # Año del examen
            x = 3.1
            y = 13.6
            ausentes = 0
            aprobados = 0
            desaprobados = 0
            # Ahora cargo los alumnos
            for estudiante in lista:
                acta.drawString(x*cm, y*cm, u'%s' % estudiante[0])    # nombre
                acta.drawString(10.6*cm, y*cm, u'%s' % estudiante[2]) # taller
                acta.drawString(11.5*cm, y*cm, u'%s' % OnNotaLetra(estudiante[2])) # taller
                acta.drawString(15.0*cm, y*cm, u'%s' % estudiante[3]) # tecnología
                acta.drawString(15.9*cm, y*cm, u'%s' % OnNotaLetra(estudiante[3])) # tecnología
                acta.drawString(19.4*cm, y*cm, u'%s' % estudiante[4]) # cálculo
                acta.drawString(20.3*cm, y*cm, u'%s' % OnNotaLetra(estudiante[4])) # cálculo
                acta.drawString(23.8*cm, y*cm, u'%s' % estudiante[5]) # dibujo técnico
                acta.drawString(24.7*cm, y*cm, u'%s' % OnNotaLetra(estudiante[5])) # dibujo técnico
                acta.drawString(29.1*cm, y*cm, u'%s' % estudiante[1]) # documento
                y -= 0.6
                orden += 1
                # Hago la cuenta de ausentes, aprobados y desaprobados
                for i in range(2, 6):
                    if estudiante [i] == '':
                        ausentes += 1
                        break
                    if int(estudiante [i]) < 70:
                        desaprobados += 1
                        break
                aprobados = self.filas - ausentes - desaprobados
                # Si llego al final me preparo a pasar de hoja        
                if orden > 18:
                    break
            # Si ocupo una sola hoja hago la cuenta de los totales
            examinados = self.filas - ausentes
            if self.filas < 18:
                acta.drawString(32.7*cm, 2.75*cm, u'%s' % aprobados)
                acta.drawString(32.7*cm, 2.15*cm, u'%s' % desaprobados)
                acta.drawString(32.7*cm, 1.55*cm, u'%s' % ausentes)
                acta.drawString(32.7*cm, 0.9*cm, u'%s' % examinados)
            acta.save()
        if orden > 18: # es por si hay más de 18 alumnos
            acta = canvas.Canvas("./planillas/actaexamen_%s_2.pdf" % self.curso, pagesize=landscape(legal))
            actaexamenes(acta)
            acta.drawString(28.5*cm, 15.9*cm, u'%s' % self.curso) # Número de curso
            c = self.db.cursor()
            c.execute('''SELECT * FROM cursos WHERE num_curso = ?''', (self.curso,))
            q = c.fetchone()
            c.execute('''SELECT nombre, localidad FROM miescuela''')
            r = c.fetchone()
            c. close()
            # Revoleo para armar la casilla de especialidad
            esp = q[3]
            self.especialidad = q[3].split()
            if len(self.especialidad) == 1:
                acta.drawString(21.8*cm, 18.8*cm, u'%s' % (self.especialidad[0]))
            elif len(self.especialidad) == 2:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
            elif len(self.especialidad) == 3:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s' % (self.especialidad[2]))
            elif len(self.especialidad) == 4:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s' % (self.especialidad[2], self.especialidad[3]))
            elif len(self.especialidad) == 5:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s' % (self.especialidad[2], self.especialidad[3], self.especialidad[4]))
            elif len(self.especialidad) == 6:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
            elif len(self.especialidad) == 7:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
                acta.drawString(19.2*cm, 17.6*cm, u'%s' % (self.especialidad[6])) 
            elif len(self.especialidad) == 8:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0],
                 self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
                acta.drawString(19.2*cm, 17.6*cm, u'%s %s' % (self.especialidad[6], self.especialidad[7]))
            elif len(self.especialidad) == 9:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0], self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2], self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
                acta.drawString(19.2*cm, 17.6*cm, u'%s %s %s' % (self.especialidad[6],
                 self.especialidad[7], self.especialidad[8]))
            elif len(self.especialidad) == 10:
                acta.drawString(21.8*cm, 18.8*cm, u'%s %s' % (self.especialidad[0],
                 self.especialidad[1]))
                acta.drawString(19.2*cm, 18.2*cm, u'%s %s %s %s' % (self.especialidad[2],
                 self.especialidad[3], self.especialidad[4],
                 self.especialidad[5]))
                acta.drawString(19.2*cm, 17.6*cm, u'%s %s %s %s' % (self.especialidad[6],
                 self.especialidad[7], self.especialidad[8],
                 self.especialidad[9]))
            else:
                pass # u'me superó :P'
            acta.drawString(6.3*cm, 16.8*cm, u'%s' % r[0]) # Nombre del establecimiento
            acta.drawString(18.3*cm, 16.8*cm, u'%s' % r[1]) # Localidad del establecimiento
            self.fecha = self.dateExamen.GetValue()
            self.dia = self.fecha.GetDay()
            self.mes = self.fecha.GetMonth() + 1
            self.anio = self.fecha.GetYear()
            acta.drawString(22.0*cm, 16.8*cm, u'%02d' % int(self.dia)) # Día del examen
            import calendar
            self.mes = calendar.month_name[self.mes]
            acta.drawString(2.3*cm, 16.2*cm, u'%s' % self.mes) # Mes del examen
            acta.drawString(7.4*cm, 16.2*cm, u'%s' % self.anio) # Año del examen
            x = 3.1
            y = 13.6
            # Ahora cargo los alumnos
            for estudiante in lista[18:]:
                acta.drawString(x*cm, y*cm, u'%s' % estudiante[0])    # nombre
                acta.drawString(10.6*cm, y*cm, u'%s' % estudiante[2]) # taller
                acta.drawString(11.5*cm, y*cm, u'%s' % OnNotaLetra(estudiante[2])) # taller
                acta.drawString(15.0*cm, y*cm, u'%s' % estudiante[3]) # tecnología
                acta.drawString(15.9*cm, y*cm, u'%s' % OnNotaLetra(estudiante[3])) # tecnología
                acta.drawString(19.4*cm, y*cm, u'%s' % estudiante[4]) # cálculo
                acta.drawString(20.3*cm, y*cm, u'%s' % OnNotaLetra(estudiante[4])) # cálculo
                acta.drawString(23.8*cm, y*cm, u'%s' % estudiante[5]) # dibujo técnico
                acta.drawString(24.7*cm, y*cm, u'%s' % OnNotaLetra(estudiante[5])) # dibujo técnico
                acta.drawString(29.1*cm, y*cm, u'%s' % estudiante[1]) # documento
                y -= 0.6
                orden += 1
                # Hago la cuenta de ausentes, aprobados y desaprobados
                for i in range(2, 6):
                    if estudiante [i] == '':
                        ausentes += 1
                        break
                    if int(estudiante [i]) < 70:
                        desaprobados += 1
                        break
                aprobados = self.filas - ausentes - desaprobados
                examinados = self.filas - ausentes
                # Si llego al final me preparo a pasar de hoja        
                if orden > 36:
                    break
            # Cuento los totales
            acta.drawString(32.7*cm, 2.75*cm, u'%s' % aprobados)
            acta.drawString(32.7*cm, 2.15*cm, u'%s' % desaprobados)
            acta.drawString(32.7*cm, 1.55*cm, u'%s' % ausentes)
            acta.drawString(32.7*cm, 0.9*cm, u'%s' % examinados)
            acta.save()
        if int(self.filas) < 19:
            aviso = u'Un acta de examen ha sido generada '
        else:
            aviso = u'Dos actas de examen han sido generadas'
        dlg = wx.MessageDialog(self, u"%s en el directorio '/planillas'" % aviso,
         u"Alta de examen", wx.OK | wx.ICON_INFORMATION)
        dlg.ShowModal()
        dlg.Destroy()
        # Cierro el curso
        c = self.db.cursor()
        c.execute('''UPDATE cursos SET estado = ? WHERE id_curso = ?;''', (u'I', q[0]))
        self.db.commit()
        c.close()
        self.Close()

    def OnCancelar(self, event): # wxGlade: ActaExamen.<event_handler>
        self.Close()
        
def OnNotaLetra(nota):
    nota = str(nota)
    if nota == '':
        notaaponer = u'Ausente'
    elif len(nota) > 2:
        notaaponer = u'Cien'
    elif len (nota) == 2:
        if nota[-2] == '1':
            if nota[-1] == '0':
                notaaponer =  u'Diez'
            elif nota[-1] == '1':
                notaaponer =  u'Once'
            elif nota[-1] == '2':
                notaaponer =  u'Doce'
            elif nota[-1] == '3':
                notaaponer =  u'Trece'
            elif nota[-1] == '4':
                notaaponer =  u'Catorce'
            elif nota[-1] == '5':
                notaaponer =  u'Quince'
            elif nota[-1] == '6':
                notaaponer =  u'Dieciseis'
            elif nota[-1] == '7':
                notaaponer =  u'Diecisiete'
            elif nota[-1] == '8':
                notaaponer =  u'Dieciocho'
            elif nota[-1] == '9':
                notaaponer =  u'Diecinueve'
        elif nota[-2] == '2':
            if nota[-1] == '0':
                notaaponer =  u'Veinte'
            elif nota[-1] == '1':
                notaaponer =  u'Veintiuno'
            elif nota[-1] == '2':
                notaaponer =  u'Veintidos'
            elif nota[-1] == '3':
                notaaponer =  u'Veintitres'
            elif nota[-1] == '4':
                notaaponer =  u'Veinticuatro'
            elif nota[-1] == '5':
                notaaponer =  u'Veinticinco'
            elif nota[-1] == '6':
                notaaponer =  u'Veintiseis'
            elif nota[-1] == '7':
                notaaponer =  u'Veintisiete'
            elif nota[-1] == '8':
                notaaponer =  u'Veintiocho'
            elif nota[-1] == '9':
                notaaponer =  u'Veintinueve'
        else:
            # Decenas
            if nota[-2] == '3':
                decenas = u'Treinta '
            elif nota[-2] == '4':
                decenas = u'Cuarenta '
            elif nota[-2] == '5':
                decenas = u'Cincuenta '
            elif nota[-2] == '6':
                decenas = u'Sesenta '
            elif nota[-2] == '7':
                decenas = u'Setenta '
            elif nota[-2] == '8':
                decenas = u'Ochenta '
            elif nota[-2] == '9':
                decenas = u'Noventa '
            # Unidades    
            if nota[-1] == '0':
                unidades = u''
            elif nota[-1] == '1':
                unidades = u'y uno'
            elif nota[-1] == '2':
                unidades = u'y dos'
            elif nota[-1] == '3':
                unidades = u'y tres'
            elif nota[-1] == '4':
                unidades = u'y cuatro'
            elif nota[-1] == '5':
                unidades = u'y cinco'
            elif nota[-1] == '6':
                unidades = u'y seis'
            elif nota[-1] == '7':
                unidades = u'y siete'
            elif nota[-1] == '8':
                unidades = u'y ocho'
            elif nota[-1] == '9':
                unidades = u'y nueve'
            notaaponer = decenas + unidades
    else:
        if nota[0] == '1':
            notaaponer = u'Uno'
        elif nota[0] == '2':
            notaaponer = u'Dos'
        elif nota[0] == '3':
            notaaponer = u'Tres'
        elif nota[0] == '4':
            notaaponer = u'Cuatro'
        elif nota[0] == '5':
            notaaponer = u'Cinco'
        elif nota[0] == '6':
            notaaponer = u'Seis'
        elif nota[0] == '7':
            notaaponer = u'Siete'
        elif nota[0] == '8':
            notaaponer = u'Ocho'
        elif nota[0] == '9':
            notaaponer = u'Nueve'
    return notaaponer                
                

# end of class ActaExamen


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame = ActaExamen(None, -1, "")
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()
else:
    frameActa = ActaExamen(None)
